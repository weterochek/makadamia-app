require("dotenv").config();
const express = require("express");
const { v4: uuidv4 } = require("uuid");
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const cors = require("cors");
const path = require("path");
const crypto = require("crypto");
const nodemailer = require("nodemailer");
const jwt = require("jsonwebtoken");
const cookieParser = require("cookie-parser");
const Joi = require("joi");
const app = express();
const orderRoutes = require("./routes/orderRoutes");
const { protect } = require('./middleware/authMiddleware');
const Order = require('./models/Order');
const User = require('./models/User');
const Product = require("./models/Products");  
const Review = require('./models/Review');
const sendEmail = require("./utils/sendEmail");



// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const allowedOrigins = [
  'https://makadamia-app-etvs.onrender.com',
  'http://localhost:3000' // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
];

console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /refresh");

const corsOptions = {
    origin: (origin, callback) => {
        const allowedOrigins = [
            "https://makadamia-app-etvs.onrender.com",
            "http://localhost:3000"
        ];
        if (!origin || allowedOrigins.includes(origin)) {
            callback(null, true);
        } else {
            callback(new Error("Not allowed by CORS"));
        }
    },
    credentials: true, // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ s!
};
app.use(express.json());
app.use(cors(corsOptions));
app.use(cookieParser());
app.use('/api', orderRoutes);
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const JWT_SECRET = process.env.JWT_SECRET || "ai3ohPh3Aiy9eeThoh8caaM9voh5Aezaenai0Fae2Pahsh2Iexu7Qu/";
const mongoURI = process.env.MONGO_URI || "mongodb://11_ifelephant:ee590bdf579c7404d12fd8cf0990314242d56e62@axs-h.h.filess.io:27018/11_ifelephant";
const REFRESH_SECRET = process.env.REFRESH_SECRET || "J8$GzP1d&KxT^m4YvNcR";
mongoose.connect(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  ssl: false, // –í–∫–ª—é—á–µ–Ω–æ SSL
})
  .then(() => console.log("MongoDB connected"))
  .catch((error) => console.error("MongoDB connection error:", error));

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
function isTokenExpired(token) {
    try {
        const payload = JSON.parse(atob(token.split(".")[1])); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        return payload.exp * 1000 < Date.now(); // –ï—Å–ª–∏ exp –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫
    } catch (e) {
        return true; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    }
}


// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP –Ω–∞ HTTPS
app.use((req, res, next) => {
    if (process.env.NODE_ENV === "production") {
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:", req.headers["x-forwarded-proto"]);
        if (req.headers["x-forwarded-proto"] !== "https") {
            console.log("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ HTTPS...");
            return res.redirect(`https://${req.headers.host}${req.url}`);
        }
    }
    next();
});

const Cart = require("./models/Cart"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª—å
app.get("/api/account", protect, async (req, res) => {
  const user = req.user; // req.user –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏–∑ middleware `protect`

  if (!user) {
    return res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  }

  res.json({
    username: user.username,
    email: user.email,
    city: user.city,
  });
});

app.post('/cart/add', protect, async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res.status(401).json({ message: '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É' });
    }

    const { productId, quantity } = req.body;
    const userId = req.user.id;

    let cart = await Cart.findOne({ userId });

    if (!cart) {
      cart = new Cart({ userId, items: [] });
    }

    const existingItem = cart.items.find(item => item.productId.toString() === productId);

    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      cart.items.push({ productId, quantity });
    }

    await cart.save();
    res.status(200).json({ message: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", cart });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –£–∫–∞–∑–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
app.use(express.static(path.join(__dirname, "public")));

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
app.get('/s/:id', async (req, res) => {
  try {
    const product = await Products.findById(req.params.id); // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Products, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤–∞—à–∞ –º–æ–¥–µ–ª—å
    if (!product) {
      return res.status(404).json({ message: 'Product not found' });
    }
    res.json(product);  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});
// üîê –ó–∞—â–∏—â—ë–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏, –≥–æ—Ä–æ–¥–∞ –∏ email
app.post("/update-account", protect, async (req, res) => {
  try {
    const { name, city, email } = req.body;
    const user = await User.findById(req.user.id);
    if (!user) return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    if (name !== undefined) user.name = name;
    if (city !== undefined) user.city = city;

    if (email !== undefined && email !== user.email) {
      const exists = await User.findOne({ email, _id: { $ne: user._id } });
      if (exists) return res.status(400).json({ message: "–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });

if (email && email !== user.email) {
  // –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
  const exists = await User.findOne({ email });
  if (exists) {
    return res.status(400).json({ message: "–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
  }

  user.pendingEmail = email;

  const token = crypto.randomBytes(32).toString("hex");
  user.emailVerificationToken = token;
  user.emailVerificationExpires = Date.now() + 3600000;

  const verifyLink = `${user.site || "https://makadamia-app-etvs.onrender.com"}/verify-email?token=${token}&email=${email}`;

  await transporter.sendMail({
    to: email,
    subject: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤—É—é –ø–æ—á—Ç—É",
    html: `<p>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ: <a href="${verifyLink}">${verifyLink}</a></p>`
  });
}
      user.emailVerificationToken = uuidv4();

      const confirmUrl = `https://makadamia-e0hb.onrender.com/confirm-email-change/${user.emailVerificationToken}`;
      await sendEmail(email, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É", `–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <a href="${confirmUrl}">${confirmUrl}</a>`);

      await user.save();
      return res.json({ message: "–ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–æ–≤—É—é –ø–æ—á—Ç—É." });
    }

    await user.save();
    res.json({ message: "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" });
  }
});
app.get('/api/products', async (req, res) => {
    try {
        const products = await Products.find();  // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Products, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤–∞—à–∞ –º–æ–¥–µ–ª—å
        res.json(products);
    } catch (err) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤" });
    }
});
// üì© –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ email
app.get("/confirm-email-change/:token", async (req, res) => {
  try {
    const user = await User.findOne({ emailVerificationToken: req.params.token });
    if (!user || !user.pendingEmail) {
      return res.status(400).send("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.");
    }

    user.email = user.pendingEmail;
    user.pendingEmail = undefined;
    user.emailVerificationToken = undefined;
    user.emailVerified = true;
    await user.save();

    res.send("‚úÖ –ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email:", err);
    res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
  }
});
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
app.get('/orders', async (req, res) => {
    try {
        const orders = await Order.find().populate('items.productId');
        res.json(orders);
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:", err);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤" });
    }
});
app.post("/api/order", protect, async (req, res) => {
    try {
        const { items, address, additionalInfo, createdAt, phone } = req.body;

        if (!items || items.length === 0) {
            return res.status(400).json({ message: "–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π" });
        }

        const newOrder = new Order({
            userId: req.user.id,
            address,
            additionalInfo,
            phone,
            items,
            createdAt,
        });

        await newOrder.save();

        res.status(201).json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω", order: newOrder });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", error: error.message });
    }
});
app.post('/request-password-reset', async (req, res) => {
  const { email } = req.body;
  const user = await User.findOne({ email });

  if (!user) {
    return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —ç—Ç–æ–π –ø–æ—á—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω" });
  }

  const token = crypto.randomBytes(32).toString('hex');
  user.resetToken = token;
  user.resetTokenExpiration = Date.now() + 15 * 60 * 1000;
  await user.save();

  const resetLink = `https://makadamia-app-etvs.onrender.com/reset.html?token=${token}`;

await transporter.sendMail({
  from: '"Makadamia Support" <your_email@gmail.com>', // –æ—Ç –∫–æ–≥–æ
  to: user.email, // –∫–æ–º—É
  subject: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è",
  html: `
    <h3>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.username}!</h3>
    <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–∞ —Å–∞–π—Ç–µ Makadamia.</p>
    <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:</p>
    <a href="${resetLink}">${resetLink}</a>
    <p><small>–°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.</small></p>
  `
});

res.json({ message: "–ü–∏—Å—å–º–æ —Å —Å—Å—ã–ª–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ—á—Ç—É" });
});
app.post('/reset-password/:token', async (req, res) => {
  const { token } = req.params;
  const { password } = req.body;

  const user = await User.findOne({
    resetToken: token,
    resetTokenExpiration: { $gt: Date.now() }
  });

  if (!user) {
    return res.status(400).json({ message: "–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞" });
  }

  user.password = await bcrypt.hash(password, 12);
  user.resetToken = undefined;
  user.resetTokenExpiration = undefined;
  await user.save();

  res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω" });
});


// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/user-orders/:userId', protect, async (req, res) => {
    try {
        const orders = await Order.find({ userId: req.params.userId }).populate("items.productId", "name price");
        res.json(orders);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤" });
    }
});


function generateTokens(user, site) {
    const issuedAt = Math.floor(Date.now() / 1000);
    
    const accessToken = jwt.sign(
        { id: user._id, username: user.username, site: "https://makadamia-app-etvs.onrender.com", iat: issuedAt },
        JWT_SECRET,
        { expiresIn: "30m" }  // ‚è≥ Access-—Ç–æ–∫–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç
    );

    const refreshToken = jwt.sign(
        { id: user._id, username: user.username, site: "https://makadamia-app-etvs.onrender.com", iat: issuedAt },
        REFRESH_SECRET,
        { expiresIn: "30d" }  // üîÑ Refresh-—Ç–æ–∫–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π
    );

    return { accessToken, refreshToken };
}




// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/register', async (req, res) => {
  const schema = Joi.object({
    username: Joi.string().trim().min(3).max(30).required(),
    password: Joi.string().min(8).required(),
    email: Joi.string().email().required()
  });

  const { error } = schema.validate(req.body);
  if (error) {
    return res.status(400).json({ message: error.details[0].message });
  }

  const { username, password, email } = req.body;

  try {
    console.log("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", username);
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const hashedPassword = await bcrypt.hash(password, 12);
    const token = crypto.randomBytes(32).toString("hex");

const newUser = new User({
  username,
  password: hashedPassword,
  email,
  emailVerified: false,
  emailVerificationToken: token,
  emailVerificationExpires: Date.now() + 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞
});

await newUser.save();

const verifyUrl = `https://makadamia-app-etvs.onrender.com/verify-email?token=${token}&email=${email}`;

await transporter.sendMail({
  from: '"Makadamia" <seryojabaulin25@gmail.com>',
  to: email,
  subject: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã",
  html: `
    <h2>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É</h2>
    <p>–ù–∞–∂–º–∏—Ç–µ <a href="${verifyUrl}">—Å—é–¥–∞</a>, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email.</p>
    <p><small>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ ‚Äî 24 —á–∞—Å–∞.</small></p>
  `
});

return res.status(201).json({
  message: '–ü–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ—á—Ç—É. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏.'
});


  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error: err.message });
  }
});
app.get("/verify-email", async (req, res) => {
  const { token, email } = req.query;

  if (!token || !email) {
    return res.status(400).send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.");
  }

  const user = await User.findOne({
    email,
    emailVerificationToken: token,
    emailVerificationExpires: { $gt: Date.now() }
  });

  if (!user) {
    return res.status(400).send("–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.");
  }

user.emailVerified = true;
if (user.pendingEmail) {
  user.email = user.pendingEmail;
  user.pendingEmail = null;
}
user.emailVerificationToken = undefined;
user.emailVerificationExpires = undefined;
  await user.save();

  return res.send("‚úÖ –ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.");
});
// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/login', async (req, res) => {
    const { username, password } = req.body;

    const user = await User.findOne({ username });
    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    const { accessToken, refreshToken } = generateTokens(user);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º refreshToken –∫–∞–∫ cookie (–¥–ª—è WebView –∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤)
res.cookie("refreshTokenAPP", refreshToken, {
  httpOnly: true,
  secure: true,
  sameSite: "None",
  path: "/",
  maxAge: 30 * 24 * 60 * 60 * 1000 // ‚úÖ 30 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ accessToken –∏ userId
res.json({
    accessToken,
    userId: user._id
});
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ü–ö-–≤–µ—Ä—Å–∏–∏
app.post('/refresh', async (req, res) => {
    const refreshToken = req.cookies.refreshTokenAPP;

    if (!refreshToken) {
        console.error("‚ùå Refresh-—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ cookies");
        return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    }

    console.log("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π refreshToken:", refreshToken);
    
    jwt.verify(refreshToken, REFRESH_SECRET, async (err, decoded) => {
        if (err) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ refresh-—Ç–æ–∫–µ–Ω–∞:", err.message);
            
            res.clearCookie("refreshTokenAPP", {
                httpOnly: true,
                secure: true,
                sameSite: "None",
                path: "/"
            });

            return res.status(403).json({ message: "Refresh-—Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫" });
        }

        if (!decoded.exp || (decoded.exp * 1000 < Date.now())) {
            console.error("‚ùå Refresh-—Ç–æ–∫–µ–Ω –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å—Ç—ë–∫!");
            res.clearCookie("refreshTokenAPP", { path: "/" });
            return res.status(403).json({ message: "Refresh-—Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫" });
        }

        try {
            const user = await User.findById(decoded.id);
            if (!user) {
                console.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID:", decoded.id);
                return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
            }

const { accessToken, refreshToken: newRefreshToken } = generateTokens(user);
res.cookie("refreshTokenAPP", newRefreshToken, {
  httpOnly: true,
  secure: true,
  sameSite: "None",
  path: "/",
  maxAge: 30 * 24 * 60 * 60 * 1000
});

            console.log("‚úÖ Refresh-—Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ");

            // üöÄ –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
            res.setHeader("Pragma", "no-cache");
            res.setHeader("Expires", "0");

            res.json({ accessToken });

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
            return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
        }
    });
});
app.get('/refresh', async (req, res) => {
  try {
    const token = req.cookies.token;
    if (!token) return res.status(401).json({ message: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞" });

    const decoded = jwt.verify(token, JWT_SECRET);
    const user = await User.findOne({ username: decoded.username });

    if (!user) return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });

    res.json({
      username: user.username,
      email: user.email,
      name: user.name,
      city: user.city,
    });
  } catch (err) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.post('/logout', (req, res) => {
    console.log("üîÑ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...");
    
    res.clearCookie("refreshTokenAPP", {
        httpOnly: true,
        secure: true,
        sameSite: 'None',
        path: "/",
        domain: "makadamia-app-etvs.onrender.com"
    });

    res.json({ message: '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' });
});


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
app.post('/-token', (req, res) => {
  const { token: Token } = req.body;

  if (!Token) {
    return res.status(403).json({ message: '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
  }

  try {
    const user = jwt.verify(Token, JWT_SECRET);
    const newAccessToken = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: '1h' });
    res.status(200).json({ token: newAccessToken });
  } catch (err) {
    res.status(403).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
});

// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/private-route', protect, (req, res) => {
  res.json({ message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.id}` });
});
app.get('/account', protect, async (req, res) => {
    try {
        if (!req.user || !req.user.id) {
            return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
        }

        const user = await User.findById(req.user.id).select("username name city email");
        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }
              // üöÄ –û—Ç–∫–ª—é—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        res.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
        res.setHeader("Pragma", "no-cache");
        res.setHeader("Expires", "0");

        res.json({
  username: user.username,
  name: user.name,
  city: user.city,
  email: user.email  // ‚Üê –¥–æ–±–∞–≤—å —ç—Ç–æ
});
    } catch (error) {  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error: error.message });
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
app.get("/connect", (req, res) => {
  res.send("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å–ø–µ—à–Ω–æ!");
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤
app.get('/api/reviews', async (req, res) => {
    try {
        const { rating } = req.query;
        let query = {};
        
        if (rating && rating !== 'all') {
            query.rating = parseInt(rating);
        }
        
        const reviews = await Review.find(query)
            .sort({ date: -1 })
            .populate('userId', 'username');
            
        res.json(reviews);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤" });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
app.post('/api/reviews', protect, async (req, res) => {
    try {
        const { rating, comment, displayName } = req.body;
        
        if (!rating || !comment) {
            return res.status(400).json({ message: "–†–µ–π—Ç–∏–Ω–≥ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }
        
        const review = new Review({
            rating,
            comment,
            displayName,
            userId: req.user.id,
            username: req.user.username,
            date: new Date()
        });
        
        await review.save();
        res.status(201).json(review);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞" });
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', error: err.message });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use((req, res) => {
  res.status(404).json({ message: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
});

// –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

